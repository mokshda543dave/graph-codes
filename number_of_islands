//FUNDA: grid k har ek element se dekho agar land h to usse DFS start kro (kse kroge: usse connected 4 places pr check kro k land h k nh agr h to uske 4 adjcanet placvs pr check kro ese krte jaoo(recursively) jap tk charo adjacent places 0 na ajae)
//  

bool isvalid(int i,int j,int r,int c)     // 4 places k indices ki validiy 
{
    if(i>=0 and j>=0 and i<r and j<c)  return true;
    return false;  
}

void convert(int i,int j,int r,int c,vector<vector<char>>& grid)    // 4 places pr recusrively check kkrna wrt current index
{
    grid[i][j]='0';     // jse hi us land ko pass kro use zero set krdo taki alag se visisted array na maintain krna pde
    if(isvalid(i,j-1,r,c) and grid[i][j-1]=='1')   convert(i,j-1,r,c,grid);
    if(isvalid(i-1,j,r,c) and grid[i-1][j]=='1')   convert(i-1,j,r,c,grid);
    if(isvalid(i,j+1,r,c) and grid[i][j+1]=='1')   convert(i,j+1,r,c,grid);
    if(isvalid(i+1,j,r,c) and grid[i+1][j]=='1')   convert(i+1,j,r,c,grid);
}
    int numIslands(vector<vector<char>>& grid) 
    {
        int islands=0;
        int r=grid.size();
        int c=grid[0].size();
      for(int i=0;i<grid.size();i++)
      {
          for(int j=0;j<grid[i].size();j++)
          {
              if(grid[i][j]=='1')    //agar island h tohi 4 adj places pr check kro else to kuch krne ki zarurat hi nh h
              {
                ++islands;
                convert(i,j,r,c,grid);  
                cout<<islands<<endl;
              }
          }
      }
      return islands;    
    }
