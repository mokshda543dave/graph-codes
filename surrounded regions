// node at any of the 4 borders--->always 'O'(no change)
// all nodes connected to border node or to node adj to border node ------>always'O'
// like provinces ques:  that province of 'O's whose at least one member is connected to at least one of the 4 borders will reamin as it is
// other no no border provinces(no member connected to border) ---->turned to 'X' from 'O'


int row[4]={0,-1,0,1};
int col[4]={-1,0,1,0};
bool isvalid(int i,int j,int r,int c)
{
return (i>=0 and i<r and j>=0 and j<c)?true:false;
}

void DFS(int x,int y,int r,int c,vector<vector<char>>& board,vector<vector<int>>& vis)
{
    vis[x][y]=1;
        for(int i=0;i<4;i++)
        {
           if(isvalid(x+row[i],y+col[i],r,c) and !vis[x+row[i]][y+col[i]] and board[x+row[i]][y+col[i]]=='O')
          {
            DFS(x+row[i],y+col[i],r,c,board,vis);
          }
        }
}

    void solve(vector<vector<char>>& board) 
    {
         int m=board.size();
        int n=board[0].size();
        vector<vector<int>> vis(m,vector<int> (n,0));
       for(int i=0;i<m;i++)      // first column
           {
               if(!vis[i][0] and board[i][0]=='O')  DFS(i,0,m,n,board,vis);
               if(!vis[i][n-1] and board[i][n-1]=='O')  DFS(i,n-1,m,n,board,vis);
           }
        for(int i=0;i<n;i++)      // first column
           {
               if(!vis[0][i] and board[0][i]=='O')  DFS(0,i,m,n,board,vis);       // first row
               if(!vis[m-1][i] and board[m-1][i]=='O')  DFS(m-1,i,m,n,board,vis);        // last row
           }
           for(int i=0;i<m;i++)
           {
               for(int j=0;j<n;j++)
               {
                  if(board[i][j]=='O' and !vis[i][j]) board[i][j]='X';
               }
           }
    }
