bool isvalid(int i,int j,int r,int c)             //index validity
{
return (i>=0 and i<r and j>=0 and j<c)?true:false;
}

    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) 
    {
        int m=mat.size();
        int n=mat[0].size();
        vector<vector<int>> ans(m,vector<int> (n));
        vector<vector<int>> vis(m,vector<int> (n));
        queue<pair<pair<int,int>,int>> q;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(mat[i][j]==0)             // 0 has itseld as the nearest 0 and hence dis to itself=0
                {
                    vis[i][j]=1;
                    q.push({{i,j},0});
                }
            }
        }
        int row[4]={0,-1,0,1};
        int col[4]={-1,0,1,0};
        while(!q.empty())
        {
            int x=q.front().first.first;
            int y=q.front().first.second;
            int dis=q.front().second;
            ans[x][y]=dis;             // as soon as element is popped from the queue write its distance vallue into and 2D array
            q.pop();
        for(int i=0;i<4;i++)                  // distances for 0 from 4 neaighbours 
        { 
           if(isvalid(x+row[i],y+col[i],m,n) and !vis[x+row[i]][y+col[i]])    //push only the unvisited neighbours 
          {
              vis[x+row[i]][y+col[i]]=1;
               q.push({{x+row[i],y+col[i]},dis+1});
          }
        }
        }
        return ans;
    }
