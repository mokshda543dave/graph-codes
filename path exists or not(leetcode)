bool validPath(int n, vector<vector<int>>& edges, int source, int destination) 
    {
      vector<int> v[n];
      for(int i=0;i<edges.size();i++)
      {  v[edges[i][0]].push_back(edges[i][1]);  
        v[edges[i][1]].push_back(edges[i][0]);  
      }
    //BFS is better here to traverse because iteratively its easy to return true in recursion you need to pay attention to return of each cal    
    queue<int> q;
    q.push(source);
   vector<bool> vis(n,0);    //yha agar bool ki array lerhi thi to dikkat arhi thi
    vis[source]=1;
    while(!q.empty())
    {
      int node=q.front();
      q.pop();
      for(auto it:v[node])
     {
       if(!vis[it])
      { vis[it]=1; 
      q.push(it);}
     }
    }
  return vis[destination];
    }
